print("Арифметические операторы")
print(3+4)          # сложение
print(3-4)          # вычитание
print(3*4)          # умножение 
print(3**2)         # возведение в степень
print(4**(1/2))     # извлечение корня
print(3/3)          # деление
print(5//2)         # деление без остатка
print(5%2)          # деление по модулю (остаток от деления)
print()
print("Операторы сравнения")
print(4>3)
print(4<3)
print(4>=4)
print(4==4)
print(4!=3)
print()
print("Операторы присваивания")
a = 9               # Присваивание (=)
print(a)
a += 2              # Сложение и присваивание (+=)
print(a)
a -= 2              # Вычитание и присваивание (-=)
print(a)
a /= 3              # Деление и присваивание (/=)
print(a)
a *= 3              # Умножение и присваивание (*=)
print(a)
a %= 2              # Деление по модулю и присваивание (%=)
print(a)
a = 3
a **= 2             # Возведение в степень и присваивание (**=)
print(a)
a //= 2             # Деление без остатка и присваивание (//=)
print(a)
print()
print("Логические операторы")
a = 7>1 and 1==1    # И (and). Если условия с двух сторон оператора and истинны, тогда все выражение целиком считается истинным
print(a)
a = 7<1 and 1==1
print(a)
a = 7>1 or 1==1     # Или (or). Выражение ложно, если оба операнда с двух сторон ложные. Если хотя бы одно из них истинное, то и все выражение истинно.
print(a)
a = 7<1 or 1==1
print(a)
a = 18
print(not a>18)     # Не (not). Этот оператор инвертирует булевые значения выражения. 
print()
print("Операторы принадлежности")
nums = [3,4,5]      # В (in). Оператор in возвращает True если в некотором наборе значений есть определенное значение.
print(2 in nums)
print(3 in nums)
nums = [3,4,5]      # Нет в (not in). Этот оператор проверяет, НЕ является ли значение членом последовательности.
print(2 not in nums)
print(3 not in nums)
print()
print("Операторы тождественности")
a = 18              # Это (is). 
print(2 is 18)
a = 18              # Это не (is not). 
print(2 is not 18)
print()
print("Битовые операторы")
'''
a & b	Побитовое И для a и b
a | b	Побитовое ИЛИ для a и b
a ^ b	Исключающее ИЛИ для a и b
~a	Инверсия битов для a
a << b	Побитовый сдвиг влево для a на b
a >> b	Побитовый сдвиг вправо для a на b
'''
# Не понимаю пока как их использовать, потому не привожу примеры, а просто указываю.